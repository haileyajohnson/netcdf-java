plugins {
  id 'base' // Adds 'assemble', 'check', 'build', and 'clean' tasks.
  id 'edu.ucar.unidata.site.jekyll'
}

//////////////////////////////////////////////// Javadoc ////////////////////////////////////////////////
apply from: "$rootDir/gradle/any/javadoc.gradle"
apply from: "$rootDir/gradle/any/testing.gradle"

dependencies {
  testImplementation enforcedPlatform(project(':netcdf-java-testing-platform'))

  testCompile project(':cdm:cdm-core')
  testCompile project(':cdm:cdm-s3')
  testCompile project(':netcdf4')
  testCompile project(':opendap')
  testCompile project(':cdm-test-utils')
  testCompile 'org.slf4j:slf4j-api'
  testCompile 'junit:junit'
  testCompile 'com.google.truth:truth'

  testRuntimeOnly 'ch.qos.logback:logback-classic'
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

//////////////////////////////////////////////// Nexus ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/properties.gradle"  // For Nexus credential properties.

import edu.ucar.build.publishing.tasks.PublishToRawRepoTask

tasks.withType(PublishToRawRepoTask).all {  // Common PublishToRawRepoTask config.
  group = 'Documentation'

  host = 'https://artifacts.unidata.ucar.edu/'
  repoName = 'docs-netcdf-java'

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

tasks.register('publishAsVersionedDocs', PublishToRawRepoTask) {
  description = 'Publish user guide (versioned) to Nexus under /major.minor/.'

  publishSrc = buildJekyllSite.destinationDirectory.get()
  destPath = "netcdf-java/$project.docVersion/userguide/"
  dependsOn tasks.getByName('buildJekyllSite')
}

tasks.register('publishAsCurrentDocs', PublishToRawRepoTask) {
  description = 'Publish the user guide to Nexus under /current/.'

  publishSrc = buildJekyllSite.destinationDirectory.get()
  destPath = 'netcdf-java/current/userguide/'
  dependsOn tasks.getByName('buildJekyllSite')
}

import edu.ucar.build.publishing.tasks.DeleteFromNexusTask

// By default, this will perform a dry run, which simply prints the components that the query matched.
// To actually delete those components, do:  ./gradlew :docs:deleteFromNexus --dryRun=false
task deleteVersionedDocsFromNexus(group: 'Documentation', type: DeleteFromNexusTask) {
  description = 'Remove user guide and both Javadoc sets on Nexus under /major.minor/.'
  host = 'https://artifacts.unidata.ucar.edu/'
  searchQueryParameters.repository = 'docs-netcdf-java'
  searchQueryParameters.group = "/netcdf-java/$project.docVersion/userguide/*"

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

task deleteCurrentDocsFromNexus(group: 'Documentation', type: DeleteFromNexusTask) {
  description = 'Remove user guide and both Javadoc sets on Nexus under /current/.'
  host = 'https://artifacts.unidata.ucar.edu/'
  searchQueryParameters.repository = 'docs-netcdf-java'
  searchQueryParameters.group = '/netcdf-java/current/userguide/*'

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

// Will apply to "compileJava", "compileTestJava", "compileSourceSetJava", etc.
tasks.withType(JavaCompile).all {
  options.encoding = 'UTF-8'

  // show deprecation details
  options.compilerArgs = ['-Xlint:deprecation']
}

apply plugin: 'com.diffplug.gradle.spotless'
spotless {
  java {
    // target java files in the test directory
    target 'src/test/java/**/*.java'
    eclipse().configFile("$rootDir/project-files/code-styles/eclipse-style-guide.xml",
            'src/test/style/style-override.properties')
    encoding 'UTF-8'
  }
}
